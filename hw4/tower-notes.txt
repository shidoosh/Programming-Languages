My speedup/1 is the following: 
speedup(R):-
	statistics(cpu_time, [Start0|_]),
	plain_tower(8, [[5,8,6,2,7,4,3,1],
                       [6,4,3,8,2,1,5,7],
                       [4,3,7,5,1,8,6,2],
                       [3,5,1,6,4,7,2,8],
                       [7,2,8,1,5,6,4,3],
                       [8,7,5,4,3,2,1,6],
                       [1,6,2,3,8,5,7,4],
                       [2,1,4,7,6,3,8,5]], _),
	statistics(cpu_time, [Stop0|_]),
	R0 is Stop0-Start0,
	statistics(cpu_time, [Start1|_]),
        tower(8, [[5,8,6,2,7,4,3,1],
                       [6,4,3,8,2,1,5,7],
                       [4,3,7,5,1,8,6,2],
                       [3,5,1,6,4,7,2,8],
                       [7,2,8,1,5,6,4,3],
                       [8,7,5,4,3,2,1,6],
                       [1,6,2,3,8,5,7,4],
                       [2,1,4,7,6,3,8,5]], _),
        statistics(cpu_time, [Stop1|_]),  
	R1 is Stop1-Start1, 
	R is R0/R1. 

In top-level prolog I ran, 
?- speedup(N).
with ?- trace. enabled. 
My result: 
	.
	.
	.
     2941  2  Exit: 1.5 is 6/4 ? 
      1    1  Exit: speedup(1.5) ? 

     N = 1.5 ? 
Thus, my speedup ratio plain_tower:tower is 1.5. 
Note: As suggested on Piazza, since the divisor by 0 problem, 
I ran this N times and took the average for the times it was successful, 
which ended up being ~1.5 as well. 

I defined my ambiguous/4 as the following: 
ambiguous(N, C, T1, T2):-
        tower(N, T1, C),
        tower(N, T2, C).

I ran the following query and stepped through (;), searching for 
an answer such that T1 and T2 are not the same solution: 
?- ambiguous(4, C, T1, T2). 

This is the first result I got that satisfied the ambiguity, 
such that they have identical counts and are of NxN size, 
yet different solutions: 
C = counts([4,2,2,1],[1,2,2,4],[4,2,2,1],[1,2,2,4])
T1 = [[1,2,3,4],[2,1,4,3],[3,4,1,2],[4,3,2,1]]
T2 = [[1,2,3,4],[2,4,1,3],[3,1,4,2],[4,3,2,1]] 
